# modules/document_generator.py
from docx import Document
import os
import logging
import subprocess
import shutil # For reliable file moving/renaming

# --- Configuration (CRITICAL: ADJUST PATH IF NEEDED) ---
# NOTE: This path MUST be correct if you want to use PDF/DOCX conversion via Pandoc.
# If Pandoc is not installed, only the 'markdown' output will work.
PANDOC_PATH = r"C:\Program Files\Pandoc\pandoc.exe"
# -------------------------------------------------

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_file_name(topic: str, format: str = 'docx') -> str:
    """Utility to generate a safe filename."""
    format_lower = format.lower()
    sanitized_title = "".join(c for c in topic if c.isalnum() or c in (' ', '_')).rstrip()
    return f"{sanitized_title.replace(' ', '_')}.{format_lower}"


def create_and_save_document(title: str, markdown_content: str, format: str = 'docx') -> str:
    """
    Creates and saves a document (DOCX, Markdown, PDF via Pandoc) from markdown content.
    Returns: relative path to the static folder, or an error message string starting with 'Error:'.
    """
    STATIC_DIR = os.path.join(os.getcwd(), 'app', 'static')
    DOCS_DIR = os.path.join(STATIC_DIR, 'documents')
    os.makedirs(DOCS_DIR, exist_ok=True)
    
    # 1. Prepare paths and filenames
    file_format = format.lower()
    # We force the filename extension to DOCX for the physical file creation,
    # as the frontend will download it anyway.
    actual_filename = get_file_name(title, 'docx')
    file_path_abs = os.path.join(DOCS_DIR, actual_filename)
    
    # Use a unique temporary MD file
    temp_md_path = os.path.join(DOCS_DIR, f"temp_{os.getpid()}_{os.urandom(4).hex()}.md")
    result_path = ""
    
    # --- Always write content to a temporary Markdown file first ---
    try:
        with open(temp_md_path, 'w', encoding='utf-8') as f:
             f.write(markdown_content)
    except Exception as e:
        logging.error(f"Failed to write temporary markdown file: {e}")
        return "Error: Failed to prepare content for conversion."
        
    # 2. Conversion Logic
    try:
        if file_format == 'markdown':
            # For markdown, we save the raw content as .md
            shutil.move(temp_md_path, file_path_abs.replace('.docx', '.md')) # Change file extension to .md
            result_path = f"static/documents/{actual_filename.replace('.docx', '.md')}"
            
        elif file_format == 'docx' or file_format == 'pdf':
            # --- Pandoc Conversion (Used for DOCX and attempted for PDF) ---
            
            if not os.path.exists(PANDOC_PATH):
                raise FileNotFoundError(f"Pandoc executable not found at: {PANDOC_PATH}")

            # Define output format for Pandoc
            pandoc_output_format = 'docx'
            if file_format == 'pdf':
                 pandoc_output_format = 'pdf'
                 logging.warning("PDF requires LaTeX/external tools. Conversion may fail.")

            logging.info(f"Attempting Pandoc conversion to {pandoc_output_format.upper()}.")
            
            # Subprocess call to Pandoc
            subprocess.run(
                [PANDOC_PATH, temp_md_path, "-o", file_path_abs, "--to", pandoc_output_format],
                check=True,
                capture_output=True,
                text=True
            )
            logging.info(f"Pandoc successful for {file_format}.")
            result_path = f"static/documents/{actual_filename}" # Returns DOCX filename (if successful)

        else:
            return f"Error: Unsupported format '{file_format.upper()}'."
            
    except subprocess.CalledProcessError as e:
        logging.error(f"Pandoc conversion failed: {e.returncode}. STDERR: {e.stderr}")
        # Return a specific error for the frontend to display, as the file creation failed.
        return f"Error: Pandoc conversion failed for {file_format.upper()}. Reason: {e.returncode}."
    except FileNotFoundError:
        logging.error(f"Pandoc executable not found at: {PANDOC_PATH}")
        return "Error: Pandoc executable not found. Please verify PANDOC_PATH."
    except Exception as e:
        logging.exception(f"Unexpected error during document creation for {file_format}")
        return f"Error creating file: {type(e).__name__} - {e}"

    finally:
        # 3. Clean up the temporary markdown file
        if os.path.exists(temp_md_path):
             os.remove(temp_md_path)
             
    # 4. Final verification and return
    if result_path and os.path.exists(file_path_abs):
        return result_path
    else:
        return f"Error: File creation failed or file was not generated by Pandoc."